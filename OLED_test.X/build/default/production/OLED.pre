
# 1 "OLED.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 14 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h"
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 36
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 54 "OLED.h"
uint8_t scrbuf[1024];

typedef struct
{
uint8_t* font;
uint8_t x_size;
uint8_t y_size;
uint8_t offset;
uint8_t numchars;
uint8_t inverted;
} _current_font;

void setFont(uint8_t* font);
void transmitDATA(uint8_t *data,uint8_t datalen);
void transmitByte(uint8_t data);
void transmitCommand(uint8_t command);
void print2Screen(uint8_t row , uint8_t column,char *data );
void updateData();
void clearScreen();
void transmitCommand(uint8_t command);
void init_OLED(void);
void clearRow(uint8_t row);
void powerDown();
void powerUP();

uint8_t characterFont[] =
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,
0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,
0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,
0x00, 0x23, 0x13, 0x08, 0x64, 0x62,
0x00, 0x36, 0x49, 0x55, 0x22, 0x50,
0x00, 0x00, 0x05, 0x03, 0x00, 0x00,
0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,
0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,
0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,
0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,
0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,
0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
0x00, 0x20, 0x10, 0x08, 0x04, 0x02,

0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,
0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,
0x00, 0x42, 0x61, 0x51, 0x49, 0x46,
0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,
0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,
0x00, 0x27, 0x45, 0x45, 0x45, 0x39,
0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,
0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,
0x00, 0x00, 0x36, 0x36, 0x00, 0x00,
0x00, 0x00, 0x56, 0x36, 0x00, 0x00,
0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
0x00, 0x14, 0x14, 0x14, 0x14, 0x14,
0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
0x00, 0x02, 0x01, 0x51, 0x09, 0x06,

0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,
0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,
0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,
0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,
0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,
0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,
0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,
0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,
0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,
0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,
0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,
0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,
0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,
0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,
0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,
0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,

0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,
0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,
0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,
0x00, 0x46, 0x49, 0x49, 0x49, 0x31,
0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,
0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,
0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,
0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,
0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
0x00, 0x61, 0x51, 0x49, 0x45, 0x43,
0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,
0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55,
0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,
0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
0x00, 0x40, 0x40, 0x40, 0x40, 0x40,

0x00, 0x00, 0x03, 0x05, 0x00, 0x00,
0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,
0x00, 0x38, 0x44, 0x44, 0x44, 0x20,
0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,
0x00, 0x38, 0x54, 0x54, 0x54, 0x18,
0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,
0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,
0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,
0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,
0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,
0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,
0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,
0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,
0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,
0x00, 0x38, 0x44, 0x44, 0x44, 0x38,

0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,
0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,
0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,
0x00, 0x48, 0x54, 0x54, 0x54, 0x20,
0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,
0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,
0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,
0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,
0x00, 0x44, 0x28, 0x10, 0x28, 0x44,
0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,
0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,
0x00, 0x00, 0x10, 0x7C, 0x82, 0x00,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x82, 0x7C, 0x10, 0x00,
0x00, 0x00, 0x06, 0x09, 0x09, 0x06
};

# 69 "mcc_generated_files/i2c1.h"
typedef enum { I2C1_GOOD, I2C1_FAIL_TIMEOUT } i2c1_error;

# 96
void I2C1_Initialize(void);

i2c1_error i2c1_getLastError(void);

# 122
void i2c1_write1ByteRegister(uint8_t address, uint8_t reg, uint8_t data);

# 146
void i2c1_write2ByteRegister(uint8_t address, uint8_t reg, uint16_t data);

# 172
void i2c1_writeNBytes(uint8_t address,uint8_t reg, void* data, uint8_t len);

# 193
uint8_t i2c1_read1ByteRegister(uint8_t address, uint8_t reg);

# 214
uint16_t i2c1_read2ByteRegister(uint8_t address, uint8_t reg);

# 238
void i2c1_readDataBlock(uint8_t address, uint8_t reg, char *data, uint8_t len);

# 263
void i2c1_readNBytes(uint8_t address, char* data, uint8_t len);

# 2 "fonts.h"
const uint8_t capFont[] = {
0x00, 0x00, 0x00, 0x00, 0x00 ,
0x00, 0x00, 0x5f, 0x00, 0x00 ,
0x00, 0x07, 0x00, 0x07, 0x00 ,
0x12, 0x3f, 0x12, 0x3f, 0x12 ,
0x04, 0x25, 0x6b, 0x25, 0x10 ,
0x46, 0x36, 0x1c, 0x36, 0x31 ,
0x36, 0x49, 0x59, 0x26, 0x50 ,
0x00, 0x00, 0x03, 0x00, 0x00 ,
0x00, 0x00, 0x3e, 0x41, 0x41 ,
0x41, 0x41, 0x3e, 0x00, 0x00 ,
0x0a, 0x04, 0x1f, 0x04, 0x0a ,
0x08, 0x08, 0x3e, 0x08, 0x08 ,
0x00, 0x40, 0x30, 0x00, 0x00 ,
0x00, 0x08, 0x08, 0x08, 0x00 ,
0x00, 0x00, 0x40, 0x00, 0x00 ,
0x40, 0x30, 0x1c, 0x06, 0x01 ,
0x7f, 0x61, 0x5d, 0x43, 0x7f ,
0x04, 0x42, 0x7f, 0x40, 0x00 ,
0x62, 0x51, 0x49, 0x49, 0x46 ,
0x60, 0x41, 0x49, 0x4d, 0x3b ,
0x0f, 0x08, 0x08, 0x7e, 0x08 ,
0x20, 0x47, 0x45, 0x25, 0x19 ,
0x3c, 0x4a, 0x49, 0x49, 0x60 ,
0x01, 0x71, 0x19, 0x0d, 0x07 ,
0x36, 0x49, 0x49, 0x49, 0x36 ,
0x06, 0x49, 0x49, 0x49, 0x3e ,
0x00, 0x00, 0x14, 0x00, 0x00 ,
0x00, 0x40, 0x34, 0x00, 0x00 ,
0x00, 0x08, 0x14, 0x22, 0x00 ,
0x00, 0x14, 0x14, 0x14, 0x00 ,
0x00, 0x22, 0x14, 0x08, 0x00 ,
0x02, 0x01, 0x51, 0x09, 0x06 ,
0x2e, 0x41, 0x5d, 0x55, 0x1e ,
0x7e, 0x09, 0x09, 0x09, 0x7e ,
0x41, 0x7f, 0x49, 0x49, 0x36 ,
0x3e, 0x41, 0x41, 0x41, 0x41 ,
0x41, 0x7f, 0x41, 0x41, 0x3e ,
0x7f, 0x49, 0x49, 0x49, 0x41 ,
0x7f, 0x09, 0x09, 0x09, 0x01 ,
0x3e, 0x41, 0x41, 0x49, 0x79 ,
0x7f, 0x08, 0x08, 0x08, 0x7f ,
0x00, 0x00, 0x7f, 0x00, 0x00 ,
0x60, 0x40, 0x41, 0x41, 0x3f ,
0x7f, 0x08, 0x1c, 0x36, 0x63 ,
0x7f, 0x40, 0x40, 0x40, 0x40 ,
0x7f, 0x06, 0x0c, 0x06, 0x7f ,
0x7f, 0x06, 0x1c, 0x30, 0x7f ,
0x7f, 0x41, 0x41, 0x41, 0x7f ,
0x01, 0x7f, 0x09, 0x09, 0x06 ,
0x3e, 0x41, 0x51, 0x21, 0x5e ,
0x7f, 0x09, 0x19, 0x29, 0x46 ,
0x46, 0x49, 0x49, 0x49, 0x31 ,
0x01, 0x01, 0x7f, 0x01, 0x01 ,
0x3f, 0x40, 0x40, 0x40, 0x3f ,
0x7f, 0x60, 0x38, 0x0e, 0x03 ,
0x3f, 0x40, 0x38, 0x40, 0x3f ,
0x63, 0x36, 0x1c, 0x36, 0x63 ,
0x03, 0x0e, 0x78, 0x0e, 0x03 ,
0x41, 0x71, 0x5d, 0x47, 0x41 ,
0x00, 0x00, 0x7f, 0x41, 0x41 ,
0x01, 0x06, 0x1c, 0x30, 0x40 ,

# 65
0x04, 0x02, 0x01, 0x02, 0x04 ,
0x40, 0x40, 0x40, 0x40, 0x40 ,
0x00, 0x00, 0x01, 0x02, 0x00 };

# 13 "OLED.c"
void init_OLED(void)
{
transmitCommand(0xAE);
transmitCommand(0x20);
transmitCommand(0x10);
transmitCommand(0xB0);
transmitCommand(0xC8);
transmitCommand(0x00);
transmitCommand(0x10);
transmitCommand(0x40);
transmitCommand(0x81);
transmitCommand(0x7F);

transmitCommand(0xA1);
transmitCommand(0xA6);
transmitCommand(0xA8);
transmitCommand(0x3F);
transmitCommand(0xA4);
transmitCommand(0xD3 );
transmitCommand(0x00);
transmitCommand(0xD5);
transmitCommand(0xF0);
transmitCommand(0xD9);
transmitCommand(0x22);
transmitCommand(0xDA);
transmitCommand(0x12);
transmitCommand(0xDB);
transmitCommand(0x20);
transmitCommand(0x8D);
transmitCommand(0x14);

transmitCommand(0xAF);



}

void powerUP()
{
transmitCommand(0xA5);
}

void powerDown()
{
transmitCommand(0xAE);
}

uint8_t clearPixel[32] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uint8_t leftOver[4] = {0x00,0x00,0x00,0x00};

void clearRow(uint8_t row)
{
int page = 0xB0 + row;
transmitCommand(page);
int i = 0;
for (i = 0; i < 4;i++)
{
transmitDATA(clearPixel,32);
}
transmitDATA(leftOver,4);
}

void clearScreen()
{
int i = 0;
for (i = 0;i < 8; i++)
{
clearRow(i);
transmitCommand(0x00);
transmitCommand(0x10);
}
}



void setCursorPosition(int row,int column)
{

int page = 0xB0 + row;
transmitCommand(page);


column += 2;
int lowerAddressByte = (column & 0x0F);
int upperAddressByte = (column >> 4) + 0x10;
transmitCommand(upperAddressByte);
transmitCommand(lowerAddressByte);
}


void transmitCommand(uint8_t command)
{
i2c1_write1ByteRegister(0x3C,0x80,command);
}

void transmitByte(uint8_t data)
{
i2c1_write1ByteRegister(0x3C,0x40,data);
}

void transmitDATA(uint8_t *data,uint8_t datalen)
{
i2c1_writeNBytes(0x3C,0x40,data,datalen);
}

void print2Screen(uint8_t row , uint8_t column,char *data )
{
int current_row, current_column;
uint8_t pixelVal[5];
setCursorPosition(row,column);
current_row = row;
current_column = column;
int i = 0;
for (i = 0; i < strlen(data) ; i++)
{
int character = ((char)(data[i]) - ' ') * 5;
uint8_t k = 0;
for (k = 0; k < 5; k++)
{
pixelVal[k] = capFont[character++];
}
transmitDATA(pixelVal,5);
transmitByte(0x00);


}

}

